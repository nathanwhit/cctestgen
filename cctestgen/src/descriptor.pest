WHITESPACE = _{ " " | "\r" | "\n" | "\t" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!("\r" | "\n") ~ ANY)*)}

descriptors = { SOI ~ descriptor ~ ("---" ~ descriptor)* ~ EOI }
descriptor = { top_statement+ }
top_statement = _ { meta | statement }
statement = {
    stmt ~ ";"?
}
stmt = _{ binding | require | expect | unit | integration | rustcode }
unit = { "unit" ~ "{" ~ statement* ~ "}" }
integration = { "integration" ~ "{" ~ statement* ~ "}" }
binding = { "let" ~ pat ~ "=" ~ expr }
pat = { ident_pat | tuple_pat }
tuple_pat = { "(" ~ (ident_pat ~ ("," ~ ident_pat)*)? ~ ")" }
ident_pat = { "mut"? ~ ident }

meta = {
    meta_inner ~ ";"?
}
meta_inner = _{  (testname | sighashes | command | tx_fee | test_type | request | signer) }
testname = {
    "name" ~ "=" ~ string
}
sighashes = {
    "sighashes" ~ "=" ~ (("[" ~ "]") | ("[" ~ ident ~ ("," ~ ident)* ~ "]"))
}
command = {
    "command" ~ "=" ~ expr
}
signer = {
    "signer" ~ "=" ~ expr
}
tx_fee = {
    "tx_fee" ~ "=" ~ expr
}
request = {
    "request" ~ "=" ~ expr
}
test_type = _{ "result" ~ "=" ~ passfail }
passfail = { "pass" | ("fail" ~ "(" ~ "err" ~ "=" ~ expr ~ ")") }
expr = { reference | method_call | rustcode | default | literal | pseudo_macro | fn_call | constructor | ident | expr_block }
pseudo_macro = { ident ~ "!" ~ ("(" ~ (expr ~ ("," ~ expr)* ~ ","?)? ~ ")") }
non_method_expr = { reference | rustcode | default | literal | pseudo_macro | fn_call | constructor | ident | expr_block }
expr_block = { "{" ~ expr ~ "}" }
fn_call = { path ~ ("(" ~ (expr ~ ("," ~ expr)* ~ ","?)? ~ ")") }
method_call = { non_method_expr ~ calls }
calls = { (call | field_access)+ }
field_access = { "." ~ ident }
call = { ( "." ~ ident ~ ("(" ~ (expr ~ ("," ~ expr)* ~ ","?)? ~ ")") ) }
reference = { (mut_ref | immut_ref) ~ expr }
mut_ref = { "&" ~ "mut" }
immut_ref = { "&" }
default = { "default" }
literal = { owned_string | string | number | array | option | bool | result | tuple }
tuple = { "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }
bool = { "true" | "false" }
option = { ("Some" ~ "(" ~ expr ~ ")") | "None" }
result = { ok | err }
ok = { ("Ok" ~ "(" ~ expr ~ ")") }
err = { ("Err" ~ "(" ~ expr ~ ")") }
field = @{ ( ASCII_ALPHANUMERIC | "-" | "_" )+ }
ident = @{ ( ASCII_ALPHANUMERIC | "-" | "_" )+ }
rustcode = _{ ("rust" ~ "{" ~ code ~ "}") }
code = ${  (!("{" | "}") ~ ANY  | block)* }
block = { "{" ~ code ~ "}" }
require = { "require" ~ "(" ~ ((requirement ~ ",")* ~ requirement? ) ~ ")" }
requirement = { wallet | guid | send_tx }
guid = { "Guid" ~ "for" ~ ident }
wallet = { "Wallet" ~ "for" ~ ident ~ "with" ~ "amount" ~ "=" ~ expr }
send_tx = { "send" ~ "transaction" ~ "="? ~ expr ~ "with" ~ "signer" ~ "="? ~ expr ~ ( "," ~ "guid" ~ "=" ~ expr)? }
expect = { "expect" ~ "(" ~ ((expectation ~ ",")* ~ expectation? ) ~ ")"}
expectation = { get_balance | get_state | set_states | set_state | delete_state | delete_states | get_sighash | get_guid | verify }
verify = { "verify" ~ "->" ~ expr }
get_balance = { "get" ~ "balance" ~ "at" ~ expr ~ "->" ~ expr }
get_state = { "get" ~ "state" ~ "at" ~ expr ~ "->" ~ expr }
set_state = { "set" ~ "state" ~ "at" ~ expr ~ "to" ~ expr }
set_states = { "set" ~ "states" ~ mapping }
get_sighash = { "sighash" ~ "->" ~ expr }
get_guid = { "guid" ~ "->" ~ expr }
delete_state = { "delete" ~ "state" ~ "at" ~ expr }
delete_states = { "delete" ~ "states" ~ array }


path = { ident ~ ("::" ~ ident)* }
constructor = { path ~ struct_map }
struct_map = {
    ("{" ~ "}") |
    ("{" ~ struct_pair ~ ("," ~ struct_pair)* ~ ","? ~ "}")
}
struct_pair = { field_pair | short | update }
field_pair = { ident ~ ":" ~ expr }
update = {  "." ~ "." ~ expr }
mapping = {
    ("{" ~ "}") |
    ("{" ~ pair ~ ("," ~ pair)* ~ (",")? ~ "}")
}
pair = { (expr ~ ":" ~ expr) | short }
short = { expr }


string = ${ "\"" ~ inner ~ "\"" }
owned_string = { "s" ~ string }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    // ~ ("." ~ ASCII_DIGIT*)?
    // ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
    ~ (ASCII_ALPHANUMERIC+)?
}
array = {
    "[" ~ "]" |
    "[" ~ expr ~ (("," ~ expr)* ~ ","?)? ~ "]"
}